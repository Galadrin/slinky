// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"

	math "cosmossdk.io/math"
	crypto "github.com/cometbft/cometbft/proto/tendermint/crypto"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// ValidatorStore is an autogenerated mock type for the ValidatorStore type
type ValidatorStore struct {
	mock.Mock
}

// BondedTokensAndPubKeyByConsAddr provides a mock function with given fields: _a0, _a1
func (_m *ValidatorStore) BondedTokensAndPubKeyByConsAddr(_a0 context.Context, _a1 types.ConsAddress) (math.Int, crypto.PublicKey, error) {
	ret := _m.Called(_a0, _a1)

	var r0 math.Int
	var r1 crypto.PublicKey
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ConsAddress) (math.Int, crypto.PublicKey, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ConsAddress) math.Int); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(math.Int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ConsAddress) crypto.PublicKey); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(crypto.PublicKey)
	}

	if rf, ok := ret.Get(2).(func(context.Context, types.ConsAddress) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TotalBondedTokens provides a mock function with given fields: ctx
func (_m *ValidatorStore) TotalBondedTokens(ctx context.Context) (math.Int, error) {
	ret := _m.Called(ctx)

	var r0 math.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (math.Int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) math.Int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(math.Int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewValidatorStore creates a new instance of ValidatorStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewValidatorStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *ValidatorStore {
	mock := &ValidatorStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
