// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "cosmossdk.io/store/types"
)

// Application is an autogenerated mock type for the Application type
type Application struct {
	mock.Mock
}

// CommitMultiStore provides a mock function with given fields:
func (_m *Application) CommitMultiStore() types.CommitMultiStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CommitMultiStore")
	}

	var r0 types.CommitMultiStore
	if rf, ok := ret.Get(0).(func() types.CommitMultiStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.CommitMultiStore)
		}
	}

	return r0
}

// GetBlockRetentionHeight provides a mock function with given fields: commitHeight
func (_m *Application) GetBlockRetentionHeight(commitHeight int64) int64 {
	ret := _m.Called(commitHeight)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockRetentionHeight")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(int64) int64); ok {
		r0 = rf(commitHeight)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// NewApplication creates a new instance of Application. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplication(t interface {
	mock.TestingT
	Cleanup(func())
}) *Application {
	mock := &Application{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
