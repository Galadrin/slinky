// Code generated by mockery v2.21.1. DO NOT EDIT.

package mocks

import (
	metrics "github.com/skip-mev/slinky/service/metrics"
	mock "github.com/stretchr/testify/mock"

	time "time"

	types "github.com/skip-mev/slinky/x/oracle/types"
)

// Metrics is an autogenerated mock type for the Metrics type
type Metrics struct {
	mock.Mock
}

// AddABCIRequest provides a mock function with given fields: method, status
func (_m *Metrics) AddABCIRequest(method metrics.ABCIMethod, status metrics.Labeller) {
	_m.Called(method, status)
}

// AddOracleResponse provides a mock function with given fields: status
func (_m *Metrics) AddOracleResponse(status metrics.Labeller) {
	_m.Called(status)
}

// AddTickerInclusionStatus provides a mock function with given fields: ticker, included
func (_m *Metrics) AddTickerInclusionStatus(ticker string, included bool) {
	_m.Called(ticker, included)
}

// AddVoteIncludedInLastCommit provides a mock function with given fields: included
func (_m *Metrics) AddVoteIncludedInLastCommit(included bool) {
	_m.Called(included)
}

// ObserveABCIMethodLatency provides a mock function with given fields: method, duration
func (_m *Metrics) ObserveABCIMethodLatency(method metrics.ABCIMethod, duration time.Duration) {
	_m.Called(method, duration)
}

// ObserveMessageSize provides a mock function with given fields: msg, size
func (_m *Metrics) ObserveMessageSize(msg metrics.MessageType, size int) {
	_m.Called(msg, size)
}

// ObserveOracleResponseLatency provides a mock function with given fields: duration
func (_m *Metrics) ObserveOracleResponseLatency(duration time.Duration) {
	_m.Called(duration)
}

// ObservePriceForTicker provides a mock function with given fields: ticker, price
func (_m *Metrics) ObservePriceForTicker(ticker types.CurrencyPair, price float64) {
	_m.Called(ticker, price)
}

type mockConstructorTestingTNewMetrics interface {
	mock.TestingT
	Cleanup(func())
}

// NewMetrics creates a new instance of Metrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMetrics(t mockConstructorTestingTNewMetrics) *Metrics {
	mock := &Metrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
