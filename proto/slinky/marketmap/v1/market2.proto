syntax = "proto3";
package slinky.marketmap.v1;

option go_package = "github.com/skip-mev/slinky/x/marketmap/types";

import "gogoproto/gogo.proto";
import "slinky/types/v1/currency_pair.proto";
import "slinky/marketmap/v1/market.proto";

message Market {
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer) = false;

  Ticker ticker = 1;

  repeated ProviderConfig2 provider_configs = 2;
}

message ProviderConfig2 {
  // Name corresponds to the name of the provider for which the configuration is
  // being set.
  string name = 1;

  // OffChainTicker is the off-chain representation of the ticker i.e. BTC/USD.
  // The off-chain ticker is unique to a given provider and is used to fetch the
  // price of the ticker from the provider.
  string off_chain_ticker = 2;

  string index = 3;

  bool invert = 4;

  // MetadataJSON is a string of JSON that encodes any extra configuration
  // for the given provider config.
  string metadata_JSON = 15;
}

message ProviderConfigs {
  // Providers is the list of provider configurations for the given ticker.
  repeated ProviderConfig2 providers = 1 [ (gogoproto.nullable) = false ];
}

message MarketMap2 {
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer) = false;

  // Markets is the full list of tickers and their associated configurations
  // to be stored on-chain.
  map<string, Market> markets = 1 [ (gogoproto.nullable) = false ];

  // AggregationType is the type of aggregation that will be used to aggregate
  // the prices of the tickers.
  AggregationType aggregation_type = 4;
}
