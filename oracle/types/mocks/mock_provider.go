// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"

	oracletypes "github.com/skip-mev/slinky/oracle/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/skip-mev/slinky/x/oracle/types"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

// GetPairs provides a mock function with given fields:
func (_m *Provider) GetPairs() []types.CurrencyPair {
	ret := _m.Called()

	var r0 []types.CurrencyPair
	if rf, ok := ret.Get(0).(func() []types.CurrencyPair); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.CurrencyPair)
		}
	}

	return r0
}

// GetPrices provides a mock function with given fields: _a0
func (_m *Provider) GetPrices(_a0 context.Context) (map[types.CurrencyPair]oracletypes.QuotePrice, error) {
	ret := _m.Called(_a0)

	var r0 map[types.CurrencyPair]oracletypes.QuotePrice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[types.CurrencyPair]oracletypes.QuotePrice, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[types.CurrencyPair]oracletypes.QuotePrice); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[types.CurrencyPair]oracletypes.QuotePrice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with given fields:
func (_m *Provider) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetPairs provides a mock function with given fields: _a0
func (_m *Provider) SetPairs(_a0 ...types.CurrencyPair) {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
