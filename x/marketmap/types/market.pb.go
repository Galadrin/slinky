// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: slinky/marketmap/v1/market.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Ticker represents a price feed for a given asset pair i.e. BTC/USD. The price feed
// is scaled to a number of decimal places and has a minimum number of providers required
// to consider the ticker valid.
type Ticker struct {
	// ID is a unique sequentially-generated value for the ticker.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Base is the base asset of the ticker.
	Base string `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	// Quote is the quote asset of the ticker.
	Quote string `protobuf:"bytes,3,opt,name=quote,proto3" json:"quote,omitempty"`
	// Decimals is the number of decimal places for the ticker. The number of decimal places
	// is used to convert the price to a human-readable format.
	Decimals uint64 `protobuf:"varint,4,opt,name=decimals,proto3" json:"decimals,omitempty"`
	// MinProviderCount is the minimum number of providers required to consider the ticker
	// valid.
	MinProviderCount uint64 `protobuf:"varint,5,opt,name=min_provider_count,json=minProviderCount,proto3" json:"min_provider_count,omitempty"`
}

func (m *Ticker) Reset()         { *m = Ticker{} }
func (m *Ticker) String() string { return proto.CompactTextString(m) }
func (*Ticker) ProtoMessage()    {}
func (*Ticker) Descriptor() ([]byte, []int) {
	return fileDescriptor_fefe265720fc8a78, []int{0}
}
func (m *Ticker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ticker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ticker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ticker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ticker.Merge(m, src)
}
func (m *Ticker) XXX_Size() int {
	return m.Size()
}
func (m *Ticker) XXX_DiscardUnknown() {
	xxx_messageInfo_Ticker.DiscardUnknown(m)
}

var xxx_messageInfo_Ticker proto.InternalMessageInfo

func (m *Ticker) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Ticker) GetBase() string {
	if m != nil {
		return m.Base
	}
	return ""
}

func (m *Ticker) GetQuote() string {
	if m != nil {
		return m.Quote
	}
	return ""
}

func (m *Ticker) GetDecimals() uint64 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *Ticker) GetMinProviderCount() uint64 {
	if m != nil {
		return m.MinProviderCount
	}
	return 0
}

// MarketConfig represents the provider specific configurations for different markets and
// the associated markets they are traded on.
type MarketConfig struct {
	// Name corresponds to the name of the provider for which the configuration is being set.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// TickerConfigs is the config the provider uses to create mappings between on-chain
	// and off-chain tickers. In particular, this config maps the on-chain ticker representation
	// (i.e. BITCOIN/USD) to the off-chain ticker representation (i.e. BTC/USD).
	TickerConfigs map[uint64]TickerConfig `protobuf:"bytes,2,rep,name=ticker_configs,json=tickerConfigs,proto3" json:"ticker_configs" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *MarketConfig) Reset()         { *m = MarketConfig{} }
func (m *MarketConfig) String() string { return proto.CompactTextString(m) }
func (*MarketConfig) ProtoMessage()    {}
func (*MarketConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_fefe265720fc8a78, []int{1}
}
func (m *MarketConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketConfig.Merge(m, src)
}
func (m *MarketConfig) XXX_Size() int {
	return m.Size()
}
func (m *MarketConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MarketConfig proto.InternalMessageInfo

func (m *MarketConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MarketConfig) GetTickerConfigs() map[uint64]TickerConfig {
	if m != nil {
		return m.TickerConfigs
	}
	return nil
}

// TickerConfig is the config the provider uses to create mappings between on-chain and
// off-chain tickers.
type TickerConfig struct {
	// Ticker is the cannonical representation of the ticker/market i.e. BITCOIN/USD.
	Ticker *Ticker `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	// OffChainTicker is the off-chain representation of the ticker i.e. BTC/USD. The
	// off-chain ticker is unique to a given provider and is used to fetch the price of the
	// ticker from the provider.
	OffChainTicker string `protobuf:"bytes,2,opt,name=off_chain_ticker,json=offChainTicker,proto3" json:"off_chain_ticker,omitempty"`
}

func (m *TickerConfig) Reset()         { *m = TickerConfig{} }
func (m *TickerConfig) String() string { return proto.CompactTextString(m) }
func (*TickerConfig) ProtoMessage()    {}
func (*TickerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_fefe265720fc8a78, []int{2}
}
func (m *TickerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TickerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TickerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TickerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TickerConfig.Merge(m, src)
}
func (m *TickerConfig) XXX_Size() int {
	return m.Size()
}
func (m *TickerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TickerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TickerConfig proto.InternalMessageInfo

func (m *TickerConfig) GetTicker() *Ticker {
	if m != nil {
		return m.Ticker
	}
	return nil
}

func (m *TickerConfig) GetOffChainTicker() string {
	if m != nil {
		return m.OffChainTicker
	}
	return ""
}

// AggregateMarketConfig represents the global set of market configurations for all providers
// that will be utilized off-chain as well as how tickers will be resolved to a final
// price. Each ticker can have a list of convertable markets that will be used to convert the
// prices of a set of tickers to a common ticker.
//
// Price aggregation broadly follows the following steps:
//  1. Fetch prices for each ticker from the providers.
//  2. Calculate the final price for each ticker. This is dependent on the aggregation strategy
//     used by the oracle. The oracle may use a median price, a weighted average price, etc.
//  3. Convert the price of each ticker to a common ticker using the aggreagted ticker configurations
//     by default. The oracle may use a different aggregation strategy to convert the price of a ticker
//     to a common ticker.
//
// For example, the oracle may be configured with the feeds:
//   - BTC/USDT
//   - USDT/USD
//   - BTC/USDC
//   - USDC/USD
//
// The aggregated ticker may be:
//   - BTC/USD: (calculate a median price from the following convertable markets)
//     1. BTC/USDT -> USDT/USD = BTC/USD
//     2. BTC/USDC -> USDC/USD = BTC/USD
type AggregateMarketConfig struct {
	// MarketConfigs maps provider names to their respective market configurations.
	MarketConfigs map[string]*MarketConfig `protobuf:"bytes,1,rep,name=market_configs,json=marketConfigs,proto3" json:"market_configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// AggregatedTickerConfigs maps tickers to the list of convertable markets that will be used to
	// convert the price of a set of tickers to a common ticker. This allows developers to manually
	// specify the exact set of tickers that will be used to calculate the final price of a ticker.
	// However, it is possible that other aggregation strategies can be used.
	AggregatedTickerConfigs map[uint64]*AggregatedTickerConfig `protobuf:"bytes,2,rep,name=aggregated_ticker_configs,json=aggregatedTickerConfigs,proto3" json:"aggregated_ticker_configs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *AggregateMarketConfig) Reset()         { *m = AggregateMarketConfig{} }
func (m *AggregateMarketConfig) String() string { return proto.CompactTextString(m) }
func (*AggregateMarketConfig) ProtoMessage()    {}
func (*AggregateMarketConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_fefe265720fc8a78, []int{3}
}
func (m *AggregateMarketConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregateMarketConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AggregateMarketConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AggregateMarketConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregateMarketConfig.Merge(m, src)
}
func (m *AggregateMarketConfig) XXX_Size() int {
	return m.Size()
}
func (m *AggregateMarketConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregateMarketConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AggregateMarketConfig proto.InternalMessageInfo

func (m *AggregateMarketConfig) GetMarketConfigs() map[string]*MarketConfig {
	if m != nil {
		return m.MarketConfigs
	}
	return nil
}

func (m *AggregateMarketConfig) GetAggregatedTickerConfigs() map[uint64]*AggregatedTickerConfig {
	if m != nil {
		return m.AggregatedTickerConfigs
	}
	return nil
}

// AggregatedTickerConfig represents the aggregated ticker configuration for a given currency
// pair. The aggregated ticker configuration contains the set of tickers that will be used to
// calculate the final price of the ticker.
type AggregatedTickerConfig struct {
	// Ticker is the on-chain representation of the ticker.
	Ticker *Ticker `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	// Operations is the list of convertable markets that will be used to convert the
	// prices of a set of tickers to a common ticker.
	Operations []OperationConfig `protobuf:"bytes,2,rep,name=operations,proto3" json:"operations"`
}

func (m *AggregatedTickerConfig) Reset()         { *m = AggregatedTickerConfig{} }
func (m *AggregatedTickerConfig) String() string { return proto.CompactTextString(m) }
func (*AggregatedTickerConfig) ProtoMessage()    {}
func (*AggregatedTickerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_fefe265720fc8a78, []int{4}
}
func (m *AggregatedTickerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregatedTickerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AggregatedTickerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AggregatedTickerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregatedTickerConfig.Merge(m, src)
}
func (m *AggregatedTickerConfig) XXX_Size() int {
	return m.Size()
}
func (m *AggregatedTickerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregatedTickerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AggregatedTickerConfig proto.InternalMessageInfo

func (m *AggregatedTickerConfig) GetTicker() *Ticker {
	if m != nil {
		return m.Ticker
	}
	return nil
}

func (m *AggregatedTickerConfig) GetOperations() []OperationConfig {
	if m != nil {
		return m.Operations
	}
	return nil
}

// OperationConfig represents the operation configuration for a given ticker.
type OperationConfig struct {
	// Ticker is the on-chain representation of the ticker.
	Ticker *Ticker `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	// Invert is a boolean that indicates whether the price of the ticker should be
	// inverted.
	Invert bool `protobuf:"varint,2,opt,name=invert,proto3" json:"invert,omitempty"`
}

func (m *OperationConfig) Reset()         { *m = OperationConfig{} }
func (m *OperationConfig) String() string { return proto.CompactTextString(m) }
func (*OperationConfig) ProtoMessage()    {}
func (*OperationConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_fefe265720fc8a78, []int{5}
}
func (m *OperationConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationConfig.Merge(m, src)
}
func (m *OperationConfig) XXX_Size() int {
	return m.Size()
}
func (m *OperationConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationConfig.DiscardUnknown(m)
}

var xxx_messageInfo_OperationConfig proto.InternalMessageInfo

func (m *OperationConfig) GetTicker() *Ticker {
	if m != nil {
		return m.Ticker
	}
	return nil
}

func (m *OperationConfig) GetInvert() bool {
	if m != nil {
		return m.Invert
	}
	return false
}

func init() {
	proto.RegisterType((*Ticker)(nil), "slinky.marketmap.v1.Ticker")
	proto.RegisterType((*MarketConfig)(nil), "slinky.marketmap.v1.MarketConfig")
	proto.RegisterMapType((map[uint64]TickerConfig)(nil), "slinky.marketmap.v1.MarketConfig.TickerConfigsEntry")
	proto.RegisterType((*TickerConfig)(nil), "slinky.marketmap.v1.TickerConfig")
	proto.RegisterType((*AggregateMarketConfig)(nil), "slinky.marketmap.v1.AggregateMarketConfig")
	proto.RegisterMapType((map[uint64]*AggregatedTickerConfig)(nil), "slinky.marketmap.v1.AggregateMarketConfig.AggregatedTickerConfigsEntry")
	proto.RegisterMapType((map[string]*MarketConfig)(nil), "slinky.marketmap.v1.AggregateMarketConfig.MarketConfigsEntry")
	proto.RegisterType((*AggregatedTickerConfig)(nil), "slinky.marketmap.v1.AggregatedTickerConfig")
	proto.RegisterType((*OperationConfig)(nil), "slinky.marketmap.v1.OperationConfig")
}

func init() { proto.RegisterFile("slinky/marketmap/v1/market.proto", fileDescriptor_fefe265720fc8a78) }

var fileDescriptor_fefe265720fc8a78 = []byte{
	// 562 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xcd, 0xe6, 0x4b, 0xcd, 0xa4, 0x0d, 0xd1, 0x52, 0x8a, 0x09, 0xc8, 0x84, 0x88, 0x43, 0x24,
	0x8a, 0xa3, 0xa6, 0x48, 0x20, 0x24, 0x0e, 0x6d, 0x04, 0x48, 0x48, 0x08, 0x64, 0x71, 0xe2, 0x80,
	0xb5, 0xb1, 0x37, 0xee, 0x2a, 0xb1, 0xd7, 0xd8, 0x1b, 0x43, 0xce, 0x5c, 0x39, 0x70, 0xe5, 0x1f,
	0xf5, 0xd8, 0x23, 0x27, 0x04, 0xc9, 0x8d, 0x5f, 0x81, 0xbc, 0xeb, 0x44, 0x0e, 0x31, 0x91, 0xda,
	0xdb, 0xce, 0xcc, 0x9b, 0x99, 0xe7, 0xf7, 0xd6, 0x0b, 0xed, 0x68, 0xc2, 0xfc, 0xf1, 0xac, 0xe7,
	0x91, 0x70, 0x4c, 0x85, 0x47, 0x82, 0x5e, 0x7c, 0x94, 0x06, 0x46, 0x10, 0x72, 0xc1, 0xf1, 0x75,
	0x85, 0x30, 0x56, 0x08, 0x23, 0x3e, 0x6a, 0xed, 0xbb, 0xdc, 0xe5, 0xb2, 0xde, 0x4b, 0x4e, 0x0a,
	0xda, 0xf9, 0x8a, 0xa0, 0xfa, 0x8e, 0xd9, 0x63, 0x1a, 0xe2, 0x06, 0x14, 0x99, 0xa3, 0xa1, 0x36,
	0xea, 0x96, 0xcd, 0x22, 0x73, 0x30, 0x86, 0xf2, 0x90, 0x44, 0x54, 0x2b, 0xb6, 0x51, 0xb7, 0x66,
	0xca, 0x33, 0xde, 0x87, 0xca, 0xc7, 0x29, 0x17, 0x54, 0x2b, 0xc9, 0xa4, 0x0a, 0x70, 0x0b, 0x76,
	0x1c, 0x6a, 0x33, 0x8f, 0x4c, 0x22, 0xad, 0x2c, 0xfb, 0x57, 0x31, 0x3e, 0x04, 0xec, 0x31, 0xdf,
	0x0a, 0x42, 0x1e, 0x33, 0x87, 0x86, 0x96, 0xcd, 0xa7, 0xbe, 0xd0, 0x2a, 0x12, 0xd5, 0xf4, 0x98,
	0xff, 0x36, 0x2d, 0x0c, 0x92, 0x7c, 0xe7, 0x0f, 0x82, 0xdd, 0xd7, 0x92, 0xf5, 0x80, 0xfb, 0x23,
	0xe6, 0x26, 0x24, 0x7c, 0xe2, 0x51, 0x49, 0xab, 0x66, 0xca, 0x33, 0x26, 0xd0, 0x10, 0x92, 0xb2,
	0x65, 0x4b, 0x50, 0xa4, 0x15, 0xdb, 0xa5, 0x6e, 0xbd, 0xff, 0xc8, 0xc8, 0xf9, 0x6e, 0x23, 0x3b,
	0xce, 0x50, 0x9f, 0xaa, 0x82, 0xe8, 0xb9, 0x2f, 0xc2, 0xd9, 0x69, 0xf9, 0xfc, 0xe7, 0xdd, 0x82,
	0xb9, 0x27, 0xb2, 0x95, 0x96, 0x0d, 0x78, 0x13, 0x8a, 0x9b, 0x50, 0x1a, 0xd3, 0x59, 0x2a, 0x51,
	0x72, 0xc4, 0x8f, 0xa1, 0x12, 0x93, 0xc9, 0x54, 0x89, 0x54, 0xef, 0xdf, 0xcb, 0x65, 0x90, 0x9d,
	0x64, 0x2a, 0xfc, 0xd3, 0xe2, 0x13, 0xd4, 0xf1, 0x60, 0x37, 0x5b, 0xc2, 0xc7, 0x50, 0x55, 0x2c,
	0xe4, 0x86, 0x7a, 0xff, 0xf6, 0x96, 0x69, 0x66, 0x0a, 0xc5, 0x5d, 0x68, 0xf2, 0xd1, 0xc8, 0xb2,
	0xcf, 0x08, 0xf3, 0xad, 0xb4, 0x5d, 0x39, 0xd6, 0xe0, 0xa3, 0xd1, 0x20, 0x49, 0xab, 0x8e, 0xce,
	0xef, 0x12, 0xdc, 0x38, 0x71, 0xdd, 0x90, 0xba, 0x44, 0xd0, 0x35, 0x91, 0x1d, 0x68, 0xa8, 0x15,
	0x2b, 0x41, 0x91, 0x14, 0xf4, 0x59, 0x2e, 0x81, 0xdc, 0x19, 0x6b, 0x32, 0x2b, 0xb9, 0xcc, 0x3d,
	0x2f, 0x9b, 0xc3, 0x5f, 0x10, 0xdc, 0x22, 0xcb, 0x5e, 0xc7, 0xca, 0xb5, 0xf0, 0xe5, 0x25, 0x36,
	0xae, 0xb2, 0xce, 0xa6, 0x55, 0xe6, 0x4d, 0x92, 0x5f, 0x4d, 0x9c, 0xdd, 0xa4, 0x9a, 0x75, 0xb6,
	0x76, 0x09, 0x67, 0xb3, 0x93, 0x32, 0xce, 0xb6, 0x3e, 0xc1, 0x9d, 0x6d, 0xec, 0x72, 0x2e, 0xd2,
	0xc9, 0xfa, 0xba, 0x07, 0xdb, 0x75, 0x70, 0xfe, 0x77, 0xa5, 0xbe, 0x23, 0x38, 0xc8, 0x47, 0x5d,
	0xed, 0x76, 0xbd, 0x02, 0xe0, 0x01, 0x0d, 0x89, 0x60, 0xdc, 0x5f, 0x7a, 0x74, 0x3f, 0xb7, 0xf1,
	0xcd, 0x12, 0xa6, 0xd6, 0xa5, 0xbf, 0x55, 0xa6, 0xbb, 0xf3, 0x01, 0xae, 0xfd, 0x03, 0xba, 0x1a,
	0xa7, 0x03, 0xa8, 0x32, 0x3f, 0xa6, 0xa1, 0x90, 0x5a, 0xed, 0x98, 0x69, 0x74, 0xfa, 0xe2, 0x7c,
	0xae, 0xa3, 0x8b, 0xb9, 0x8e, 0x7e, 0xcd, 0x75, 0xf4, 0x6d, 0xa1, 0x17, 0x2e, 0x16, 0x7a, 0xe1,
	0xc7, 0x42, 0x2f, 0xbc, 0x3f, 0x74, 0x99, 0x38, 0x9b, 0x0e, 0x0d, 0x9b, 0x7b, 0xbd, 0x68, 0xcc,
	0x82, 0x87, 0x1e, 0x8d, 0x7b, 0xe9, 0x2b, 0xfa, 0x39, 0xf3, 0x8e, 0x8a, 0x59, 0x40, 0xa3, 0x61,
	0x55, 0xbe, 0x8c, 0xc7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x24, 0xdd, 0x22, 0x8a, 0x68, 0x05,
	0x00, 0x00,
}

func (m *Ticker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ticker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ticker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinProviderCount != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.MinProviderCount))
		i--
		dAtA[i] = 0x28
	}
	if m.Decimals != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Quote) > 0 {
		i -= len(m.Quote)
		copy(dAtA[i:], m.Quote)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Quote)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Base) > 0 {
		i -= len(m.Base)
		copy(dAtA[i:], m.Base)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Base)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MarketConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TickerConfigs) > 0 {
		for k := range m.TickerConfigs {
			v := m.TickerConfigs[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMarket(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintMarket(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMarket(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TickerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TickerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TickerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OffChainTicker) > 0 {
		i -= len(m.OffChainTicker)
		copy(dAtA[i:], m.OffChainTicker)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.OffChainTicker)))
		i--
		dAtA[i] = 0x12
	}
	if m.Ticker != nil {
		{
			size, err := m.Ticker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AggregateMarketConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregateMarketConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregateMarketConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AggregatedTickerConfigs) > 0 {
		for k := range m.AggregatedTickerConfigs {
			v := m.AggregatedTickerConfigs[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMarket(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMarket(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMarket(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MarketConfigs) > 0 {
		for k := range m.MarketConfigs {
			v := m.MarketConfigs[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMarket(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMarket(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMarket(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AggregatedTickerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregatedTickerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregatedTickerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Operations) > 0 {
		for iNdEx := len(m.Operations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Operations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMarket(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Ticker != nil {
		{
			size, err := m.Ticker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OperationConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Invert {
		i--
		if m.Invert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Ticker != nil {
		{
			size, err := m.Ticker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMarket(dAtA []byte, offset int, v uint64) int {
	offset -= sovMarket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Ticker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMarket(uint64(m.Id))
	}
	l = len(m.Base)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.Quote)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovMarket(uint64(m.Decimals))
	}
	if m.MinProviderCount != 0 {
		n += 1 + sovMarket(uint64(m.MinProviderCount))
	}
	return n
}

func (m *MarketConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	if len(m.TickerConfigs) > 0 {
		for k, v := range m.TickerConfigs {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovMarket(uint64(k)) + 1 + l + sovMarket(uint64(l))
			n += mapEntrySize + 1 + sovMarket(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TickerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ticker != nil {
		l = m.Ticker.Size()
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.OffChainTicker)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	return n
}

func (m *AggregateMarketConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MarketConfigs) > 0 {
		for k, v := range m.MarketConfigs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMarket(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMarket(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMarket(uint64(mapEntrySize))
		}
	}
	if len(m.AggregatedTickerConfigs) > 0 {
		for k, v := range m.AggregatedTickerConfigs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMarket(uint64(l))
			}
			mapEntrySize := 1 + sovMarket(uint64(k)) + l
			n += mapEntrySize + 1 + sovMarket(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *AggregatedTickerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ticker != nil {
		l = m.Ticker.Size()
		n += 1 + l + sovMarket(uint64(l))
	}
	if len(m.Operations) > 0 {
		for _, e := range m.Operations {
			l = e.Size()
			n += 1 + l + sovMarket(uint64(l))
		}
	}
	return n
}

func (m *OperationConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ticker != nil {
		l = m.Ticker.Size()
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.Invert {
		n += 2
	}
	return n
}

func sovMarket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMarket(x uint64) (n int) {
	return sovMarket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Ticker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ticker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ticker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Base = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinProviderCount", wireType)
			}
			m.MinProviderCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinProviderCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickerConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TickerConfigs == nil {
				m.TickerConfigs = make(map[uint64]TickerConfig)
			}
			var mapkey uint64
			mapvalue := &TickerConfig{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMarket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMarket
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMarket
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMarket
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMarket
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TickerConfig{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMarket(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMarket
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TickerConfigs[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TickerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TickerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TickerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ticker == nil {
				m.Ticker = &Ticker{}
			}
			if err := m.Ticker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffChainTicker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OffChainTicker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregateMarketConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregateMarketConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregateMarketConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MarketConfigs == nil {
				m.MarketConfigs = make(map[string]*MarketConfig)
			}
			var mapkey string
			var mapvalue *MarketConfig
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMarket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMarket
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMarket
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMarket
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMarket
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMarket
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMarket
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &MarketConfig{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMarket(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMarket
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MarketConfigs[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatedTickerConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AggregatedTickerConfigs == nil {
				m.AggregatedTickerConfigs = make(map[uint64]*AggregatedTickerConfig)
			}
			var mapkey uint64
			var mapvalue *AggregatedTickerConfig
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMarket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMarket
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMarket
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMarket
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMarket
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AggregatedTickerConfig{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMarket(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMarket
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AggregatedTickerConfigs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregatedTickerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregatedTickerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregatedTickerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ticker == nil {
				m.Ticker = &Ticker{}
			}
			if err := m.Ticker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operations = append(m.Operations, OperationConfig{})
			if err := m.Operations[len(m.Operations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ticker == nil {
				m.Ticker = &Ticker{}
			}
			if err := m.Ticker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Invert = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMarket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMarket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMarket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMarket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMarket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMarket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMarket = fmt.Errorf("proto: unexpected end of group")
)
