// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: slinky/marketmap/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AggregateMarketConfigRequest is the request type for the Query/AggregateMarketConfig RPC method.
type AggregateMarketConfigRequest struct {
}

func (m *AggregateMarketConfigRequest) Reset()         { *m = AggregateMarketConfigRequest{} }
func (m *AggregateMarketConfigRequest) String() string { return proto.CompactTextString(m) }
func (*AggregateMarketConfigRequest) ProtoMessage()    {}
func (*AggregateMarketConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5d6ff68f3c474a0, []int{0}
}
func (m *AggregateMarketConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregateMarketConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AggregateMarketConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AggregateMarketConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregateMarketConfigRequest.Merge(m, src)
}
func (m *AggregateMarketConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *AggregateMarketConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregateMarketConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AggregateMarketConfigRequest proto.InternalMessageInfo

// AggregateMarketConfigResponse is the response type for the Query/AggregateMarketConfig RPC method.
type AggregateMarketConfigResponse struct {
	// aggregate_market_config is the aggregate market configuration.
	AggregateMarketConfig *AggregateMarketConfig `protobuf:"bytes,1,opt,name=aggregate_market_config,json=aggregateMarketConfig,proto3" json:"aggregate_market_config,omitempty"`
}

func (m *AggregateMarketConfigResponse) Reset()         { *m = AggregateMarketConfigResponse{} }
func (m *AggregateMarketConfigResponse) String() string { return proto.CompactTextString(m) }
func (*AggregateMarketConfigResponse) ProtoMessage()    {}
func (*AggregateMarketConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5d6ff68f3c474a0, []int{1}
}
func (m *AggregateMarketConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregateMarketConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AggregateMarketConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AggregateMarketConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregateMarketConfigResponse.Merge(m, src)
}
func (m *AggregateMarketConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *AggregateMarketConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregateMarketConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AggregateMarketConfigResponse proto.InternalMessageInfo

func (m *AggregateMarketConfigResponse) GetAggregateMarketConfig() *AggregateMarketConfig {
	if m != nil {
		return m.AggregateMarketConfig
	}
	return nil
}

// MarketConfigRequest is the request type for the Query/MarketConfig RPC method.
type MarketConfigRequest struct {
	// provider is the provider name.
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (m *MarketConfigRequest) Reset()         { *m = MarketConfigRequest{} }
func (m *MarketConfigRequest) String() string { return proto.CompactTextString(m) }
func (*MarketConfigRequest) ProtoMessage()    {}
func (*MarketConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5d6ff68f3c474a0, []int{2}
}
func (m *MarketConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketConfigRequest.Merge(m, src)
}
func (m *MarketConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *MarketConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MarketConfigRequest proto.InternalMessageInfo

func (m *MarketConfigRequest) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

// MarketConfigResponse is the response type for the Query/MarketConfig RPC method.
type MarketConfigResponse struct {
	// market_config is the market configuration.
	MarketConfig *MarketConfig `protobuf:"bytes,1,opt,name=market_config,json=marketConfig,proto3" json:"market_config,omitempty"`
}

func (m *MarketConfigResponse) Reset()         { *m = MarketConfigResponse{} }
func (m *MarketConfigResponse) String() string { return proto.CompactTextString(m) }
func (*MarketConfigResponse) ProtoMessage()    {}
func (*MarketConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5d6ff68f3c474a0, []int{3}
}
func (m *MarketConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketConfigResponse.Merge(m, src)
}
func (m *MarketConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *MarketConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MarketConfigResponse proto.InternalMessageInfo

func (m *MarketConfigResponse) GetMarketConfig() *MarketConfig {
	if m != nil {
		return m.MarketConfig
	}
	return nil
}

// ProvidersForTickerRequest is the request type for the Query/ProvidersForTicker RPC method.
type ProvidersForTickerRequest struct {
	// ticker is the ticker symbol.
	Ticker string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
}

func (m *ProvidersForTickerRequest) Reset()         { *m = ProvidersForTickerRequest{} }
func (m *ProvidersForTickerRequest) String() string { return proto.CompactTextString(m) }
func (*ProvidersForTickerRequest) ProtoMessage()    {}
func (*ProvidersForTickerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5d6ff68f3c474a0, []int{4}
}
func (m *ProvidersForTickerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProvidersForTickerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProvidersForTickerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProvidersForTickerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProvidersForTickerRequest.Merge(m, src)
}
func (m *ProvidersForTickerRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProvidersForTickerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProvidersForTickerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProvidersForTickerRequest proto.InternalMessageInfo

func (m *ProvidersForTickerRequest) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

// ProvidersForTickerResponse is the response type for the Query/ProvidersForTicker RPC method.
type ProvidersForTickerResponse struct {
	// providers is the set of providers responsible for the ticker.
	Providers []string `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
}

func (m *ProvidersForTickerResponse) Reset()         { *m = ProvidersForTickerResponse{} }
func (m *ProvidersForTickerResponse) String() string { return proto.CompactTextString(m) }
func (*ProvidersForTickerResponse) ProtoMessage()    {}
func (*ProvidersForTickerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5d6ff68f3c474a0, []int{5}
}
func (m *ProvidersForTickerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProvidersForTickerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProvidersForTickerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProvidersForTickerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProvidersForTickerResponse.Merge(m, src)
}
func (m *ProvidersForTickerResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProvidersForTickerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProvidersForTickerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProvidersForTickerResponse proto.InternalMessageInfo

func (m *ProvidersForTickerResponse) GetProviders() []string {
	if m != nil {
		return m.Providers
	}
	return nil
}

// AggregatedTickerConfigRequest is the request type for the Query/AggregatedTickerConfig RPC method.
type AggregatedTickerConfigRequest struct {
	// ticker is the ticker symbol.
	Ticker string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
}

func (m *AggregatedTickerConfigRequest) Reset()         { *m = AggregatedTickerConfigRequest{} }
func (m *AggregatedTickerConfigRequest) String() string { return proto.CompactTextString(m) }
func (*AggregatedTickerConfigRequest) ProtoMessage()    {}
func (*AggregatedTickerConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5d6ff68f3c474a0, []int{6}
}
func (m *AggregatedTickerConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregatedTickerConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AggregatedTickerConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AggregatedTickerConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregatedTickerConfigRequest.Merge(m, src)
}
func (m *AggregatedTickerConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *AggregatedTickerConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregatedTickerConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AggregatedTickerConfigRequest proto.InternalMessageInfo

func (m *AggregatedTickerConfigRequest) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

// AggregatedTickerConfigResponse is the response type for the Query/AggregatedTickerConfig RPC method.
type AggregatedTickerConfigResponse struct {
	// config is the list of convertable markets that will be used to convert the prices of a set of
	// tickers to a target ticker.
	Config *AggregatedTickerConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *AggregatedTickerConfigResponse) Reset()         { *m = AggregatedTickerConfigResponse{} }
func (m *AggregatedTickerConfigResponse) String() string { return proto.CompactTextString(m) }
func (*AggregatedTickerConfigResponse) ProtoMessage()    {}
func (*AggregatedTickerConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5d6ff68f3c474a0, []int{7}
}
func (m *AggregatedTickerConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregatedTickerConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AggregatedTickerConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AggregatedTickerConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregatedTickerConfigResponse.Merge(m, src)
}
func (m *AggregatedTickerConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *AggregatedTickerConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregatedTickerConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AggregatedTickerConfigResponse proto.InternalMessageInfo

func (m *AggregatedTickerConfigResponse) GetConfig() *AggregatedTickerConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func init() {
	proto.RegisterType((*AggregateMarketConfigRequest)(nil), "slinky.marketmap.v1.AggregateMarketConfigRequest")
	proto.RegisterType((*AggregateMarketConfigResponse)(nil), "slinky.marketmap.v1.AggregateMarketConfigResponse")
	proto.RegisterType((*MarketConfigRequest)(nil), "slinky.marketmap.v1.MarketConfigRequest")
	proto.RegisterType((*MarketConfigResponse)(nil), "slinky.marketmap.v1.MarketConfigResponse")
	proto.RegisterType((*ProvidersForTickerRequest)(nil), "slinky.marketmap.v1.ProvidersForTickerRequest")
	proto.RegisterType((*ProvidersForTickerResponse)(nil), "slinky.marketmap.v1.ProvidersForTickerResponse")
	proto.RegisterType((*AggregatedTickerConfigRequest)(nil), "slinky.marketmap.v1.AggregatedTickerConfigRequest")
	proto.RegisterType((*AggregatedTickerConfigResponse)(nil), "slinky.marketmap.v1.AggregatedTickerConfigResponse")
}

func init() { proto.RegisterFile("slinky/marketmap/v1/query.proto", fileDescriptor_b5d6ff68f3c474a0) }

var fileDescriptor_b5d6ff68f3c474a0 = []byte{
	// 535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x41, 0x6f, 0xd3, 0x30,
	0x18, 0x86, 0x6b, 0xd0, 0x2a, 0xfa, 0x01, 0x42, 0xf2, 0x18, 0x74, 0x51, 0x09, 0x25, 0xa7, 0x02,
	0x5b, 0xac, 0xa6, 0x9b, 0x90, 0xc6, 0x09, 0x26, 0xb5, 0x27, 0x24, 0xa8, 0x38, 0x71, 0xa0, 0x4a,
	0x3b, 0x2f, 0x44, 0x5d, 0xe2, 0xcc, 0x76, 0x2b, 0xaa, 0x69, 0x17, 0xf8, 0x03, 0x48, 0x9c, 0xf9,
	0x17, 0x48, 0x9c, 0xb9, 0x71, 0x9c, 0xc4, 0x85, 0x03, 0x07, 0xd4, 0xf2, 0x43, 0x10, 0xb1, 0x53,
	0x1a, 0xe1, 0xc0, 0x72, 0x8a, 0xec, 0x7c, 0xaf, 0xdf, 0xe7, 0xb3, 0x5f, 0x1b, 0x6e, 0x8b, 0xa3,
	0x30, 0x1e, 0xcf, 0x48, 0xe4, 0xf3, 0x31, 0x95, 0x91, 0x9f, 0x90, 0x69, 0x9b, 0x1c, 0x4f, 0x28,
	0x9f, 0xb9, 0x09, 0x67, 0x92, 0xe1, 0x75, 0x55, 0xe0, 0x2e, 0x0b, 0xdc, 0x69, 0xdb, 0x6a, 0x9a,
	0x54, 0x6a, 0xa0, 0x64, 0x56, 0x23, 0x60, 0x2c, 0x38, 0xa2, 0xc4, 0x4f, 0x42, 0xe2, 0xc7, 0x31,
	0x93, 0xbe, 0x0c, 0x59, 0x2c, 0xd4, 0x5f, 0xc7, 0x86, 0xc6, 0xa3, 0x20, 0xe0, 0x34, 0xf0, 0x25,
	0x7d, 0x92, 0xca, 0xf6, 0x59, 0x7c, 0x18, 0x06, 0x7d, 0x7a, 0x3c, 0xa1, 0x42, 0x3a, 0x6f, 0x11,
	0xdc, 0x2a, 0x28, 0x10, 0x09, 0x8b, 0x05, 0xc5, 0x43, 0xb8, 0xe9, 0x67, 0x05, 0x03, 0xe5, 0x3c,
	0x18, 0xa5, 0x25, 0x75, 0xd4, 0x44, 0xad, 0xcb, 0xde, 0x3d, 0xd7, 0x00, 0xee, 0x9a, 0x17, 0xdd,
	0xf0, 0x4d, 0xd3, 0x4e, 0x1b, 0xd6, 0x0d, 0x70, 0xd8, 0x82, 0x4b, 0x09, 0x67, 0xd3, 0xf0, 0x80,
	0xf2, 0xd4, 0xab, 0xd6, 0x5f, 0x8e, 0x9d, 0x97, 0x70, 0xdd, 0x88, 0xdb, 0x85, 0xab, 0x26, 0xc8,
	0x3b, 0x46, 0xc8, 0xdc, 0x0a, 0x57, 0xa2, 0x55, 0xa4, 0x0e, 0x6c, 0x3e, 0xd5, 0x5e, 0xa2, 0xcb,
	0xf8, 0xf3, 0x70, 0x34, 0xa6, 0x3c, 0x03, 0xbb, 0x01, 0x55, 0x99, 0x4e, 0x68, 0x2c, 0x3d, 0x72,
	0xf6, 0xc0, 0x32, 0x89, 0x34, 0x5a, 0x03, 0x6a, 0x19, 0xbe, 0xa8, 0xa3, 0xe6, 0xc5, 0x56, 0xad,
	0xff, 0x67, 0xc2, 0x79, 0xb0, 0x72, 0x10, 0x07, 0x4a, 0x99, 0xdf, 0x8d, 0x22, 0x53, 0x0a, 0x76,
	0x91, 0x50, 0x1b, 0xef, 0x43, 0x35, 0xb7, 0x19, 0xf7, 0xff, 0x7d, 0x62, 0xf9, 0x45, 0xb4, 0xd4,
	0xfb, 0xbe, 0x06, 0x6b, 0xcf, 0x7e, 0xc7, 0x15, 0x7f, 0x42, 0x50, 0xef, 0x51, 0x69, 0x3c, 0x61,
	0xdc, 0x2e, 0x91, 0x06, 0xd5, 0x98, 0xe5, 0x95, 0x91, 0xa8, 0x96, 0x9c, 0x9d, 0x37, 0x5f, 0x7f,
	0xbe, 0xbf, 0xe0, 0xe2, 0x2d, 0x62, 0xba, 0x20, 0x05, 0x81, 0xc5, 0x1f, 0x10, 0x5c, 0xeb, 0x51,
	0x99, 0x03, 0x6e, 0xfd, 0x3f, 0x19, 0x9a, 0xf3, 0xee, 0x39, 0x2a, 0x35, 0xde, 0x6e, 0x8a, 0x47,
	0xf0, 0x36, 0x29, 0xbe, 0xbf, 0x1a, 0x8a, 0x9c, 0x64, 0x19, 0x38, 0xc5, 0x1f, 0x11, 0x6c, 0xf4,
	0xa8, 0xfc, 0x3b, 0x43, 0xd8, 0x35, 0x7a, 0x17, 0x26, 0xd4, 0x22, 0xe7, 0xae, 0xd7, 0xc4, 0x7b,
	0x29, 0xf1, 0x0e, 0xf6, 0x8c, 0xc4, 0xcb, 0x98, 0x0e, 0x0e, 0x19, 0x1f, 0xa8, 0xe0, 0x91, 0x13,
	0xf5, 0x3d, 0xc5, 0x9f, 0x11, 0x6c, 0xae, 0x06, 0x22, 0x17, 0x20, 0xec, 0x95, 0x49, 0x9b, 0xc6,
	0xef, 0x94, 0xd2, 0xe8, 0x16, 0x1e, 0xa6, 0x2d, 0xec, 0xe2, 0x8e, 0xb1, 0x05, 0x96, 0x50, 0xae,
	0x9e, 0x46, 0x53, 0x0f, 0x8f, 0xbb, 0x5f, 0xe6, 0x36, 0x3a, 0x9b, 0xdb, 0xe8, 0xc7, 0xdc, 0x46,
	0xef, 0x16, 0x76, 0xe5, 0x6c, 0x61, 0x57, 0xbe, 0x2d, 0xec, 0xca, 0x8b, 0xad, 0x20, 0x94, 0xaf,
	0x26, 0x43, 0x77, 0xc4, 0x22, 0x22, 0xc6, 0x61, 0xb2, 0x1d, 0xd1, 0x69, 0xe6, 0xf0, 0x7a, 0xc5,
	0x43, 0xce, 0x12, 0x2a, 0x86, 0xd5, 0xf4, 0xdd, 0xed, 0xfc, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xc9,
	0x2f, 0x24, 0xbf, 0xef, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// GetAggregateMarketConfig returns the aggregate market configuration.
	GetAggregateMarketConfig(ctx context.Context, in *AggregateMarketConfigRequest, opts ...grpc.CallOption) (*AggregateMarketConfigResponse, error)
	// GetMarketConfig returns the market configurations for a given provider.
	GetMarketConfig(ctx context.Context, in *MarketConfigRequest, opts ...grpc.CallOption) (*MarketConfigResponse, error)
	// GetProvidersForTicker returns the set of providers responsible for a given ticker.
	GetProvidersForTicker(ctx context.Context, in *ProvidersForTickerRequest, opts ...grpc.CallOption) (*ProvidersForTickerResponse, error)
	// GetAggregatedTickerConfig returns the list of convertable markets that will be used to
	// convert the prices of a set of tickers to a target ticker.
	GetAggregatedTickerConfig(ctx context.Context, in *AggregatedTickerConfigRequest, opts ...grpc.CallOption) (*AggregatedTickerConfigResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetAggregateMarketConfig(ctx context.Context, in *AggregateMarketConfigRequest, opts ...grpc.CallOption) (*AggregateMarketConfigResponse, error) {
	out := new(AggregateMarketConfigResponse)
	err := c.cc.Invoke(ctx, "/slinky.marketmap.v1.Query/GetAggregateMarketConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetMarketConfig(ctx context.Context, in *MarketConfigRequest, opts ...grpc.CallOption) (*MarketConfigResponse, error) {
	out := new(MarketConfigResponse)
	err := c.cc.Invoke(ctx, "/slinky.marketmap.v1.Query/GetMarketConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProvidersForTicker(ctx context.Context, in *ProvidersForTickerRequest, opts ...grpc.CallOption) (*ProvidersForTickerResponse, error) {
	out := new(ProvidersForTickerResponse)
	err := c.cc.Invoke(ctx, "/slinky.marketmap.v1.Query/GetProvidersForTicker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAggregatedTickerConfig(ctx context.Context, in *AggregatedTickerConfigRequest, opts ...grpc.CallOption) (*AggregatedTickerConfigResponse, error) {
	out := new(AggregatedTickerConfigResponse)
	err := c.cc.Invoke(ctx, "/slinky.marketmap.v1.Query/GetAggregatedTickerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// GetAggregateMarketConfig returns the aggregate market configuration.
	GetAggregateMarketConfig(context.Context, *AggregateMarketConfigRequest) (*AggregateMarketConfigResponse, error)
	// GetMarketConfig returns the market configurations for a given provider.
	GetMarketConfig(context.Context, *MarketConfigRequest) (*MarketConfigResponse, error)
	// GetProvidersForTicker returns the set of providers responsible for a given ticker.
	GetProvidersForTicker(context.Context, *ProvidersForTickerRequest) (*ProvidersForTickerResponse, error)
	// GetAggregatedTickerConfig returns the list of convertable markets that will be used to
	// convert the prices of a set of tickers to a target ticker.
	GetAggregatedTickerConfig(context.Context, *AggregatedTickerConfigRequest) (*AggregatedTickerConfigResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetAggregateMarketConfig(ctx context.Context, req *AggregateMarketConfigRequest) (*AggregateMarketConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregateMarketConfig not implemented")
}
func (*UnimplementedQueryServer) GetMarketConfig(ctx context.Context, req *MarketConfigRequest) (*MarketConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketConfig not implemented")
}
func (*UnimplementedQueryServer) GetProvidersForTicker(ctx context.Context, req *ProvidersForTickerRequest) (*ProvidersForTickerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProvidersForTicker not implemented")
}
func (*UnimplementedQueryServer) GetAggregatedTickerConfig(ctx context.Context, req *AggregatedTickerConfigRequest) (*AggregatedTickerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregatedTickerConfig not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetAggregateMarketConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregateMarketConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAggregateMarketConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slinky.marketmap.v1.Query/GetAggregateMarketConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAggregateMarketConfig(ctx, req.(*AggregateMarketConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetMarketConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetMarketConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slinky.marketmap.v1.Query/GetMarketConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetMarketConfig(ctx, req.(*MarketConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProvidersForTicker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvidersForTickerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProvidersForTicker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slinky.marketmap.v1.Query/GetProvidersForTicker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProvidersForTicker(ctx, req.(*ProvidersForTickerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAggregatedTickerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatedTickerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAggregatedTickerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slinky.marketmap.v1.Query/GetAggregatedTickerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAggregatedTickerConfig(ctx, req.(*AggregatedTickerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slinky.marketmap.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAggregateMarketConfig",
			Handler:    _Query_GetAggregateMarketConfig_Handler,
		},
		{
			MethodName: "GetMarketConfig",
			Handler:    _Query_GetMarketConfig_Handler,
		},
		{
			MethodName: "GetProvidersForTicker",
			Handler:    _Query_GetProvidersForTicker_Handler,
		},
		{
			MethodName: "GetAggregatedTickerConfig",
			Handler:    _Query_GetAggregatedTickerConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slinky/marketmap/v1/query.proto",
}

func (m *AggregateMarketConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregateMarketConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregateMarketConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AggregateMarketConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregateMarketConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregateMarketConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AggregateMarketConfig != nil {
		{
			size, err := m.AggregateMarketConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MarketConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MarketConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MarketConfig != nil {
		{
			size, err := m.MarketConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProvidersForTickerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProvidersForTickerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProvidersForTickerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ticker) > 0 {
		i -= len(m.Ticker)
		copy(dAtA[i:], m.Ticker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Ticker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProvidersForTickerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProvidersForTickerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProvidersForTickerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Providers[iNdEx])
			copy(dAtA[i:], m.Providers[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Providers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AggregatedTickerConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregatedTickerConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregatedTickerConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ticker) > 0 {
		i -= len(m.Ticker)
		copy(dAtA[i:], m.Ticker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Ticker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AggregatedTickerConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregatedTickerConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregatedTickerConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AggregateMarketConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AggregateMarketConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AggregateMarketConfig != nil {
		l = m.AggregateMarketConfig.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *MarketConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *MarketConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketConfig != nil {
		l = m.MarketConfig.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ProvidersForTickerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ticker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ProvidersForTickerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for _, s := range m.Providers {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *AggregatedTickerConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ticker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *AggregatedTickerConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AggregateMarketConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregateMarketConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregateMarketConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregateMarketConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregateMarketConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregateMarketConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateMarketConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AggregateMarketConfig == nil {
				m.AggregateMarketConfig = &AggregateMarketConfig{}
			}
			if err := m.AggregateMarketConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MarketConfig == nil {
				m.MarketConfig = &MarketConfig{}
			}
			if err := m.MarketConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvidersForTickerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvidersForTickerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvidersForTickerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ticker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvidersForTickerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvidersForTickerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvidersForTickerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregatedTickerConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregatedTickerConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregatedTickerConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ticker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregatedTickerConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregatedTickerConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregatedTickerConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &AggregatedTickerConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
