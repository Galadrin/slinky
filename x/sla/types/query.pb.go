// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: slinky/sla/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryAllSLAsRequest is the request type for the Query/GetAllSLAs RPC method.
type GetAllSLAsRequest struct {
}

func (m *GetAllSLAsRequest) Reset()         { *m = GetAllSLAsRequest{} }
func (m *GetAllSLAsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllSLAsRequest) ProtoMessage()    {}
func (*GetAllSLAsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e0a991cdb10d68d, []int{0}
}
func (m *GetAllSLAsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllSLAsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllSLAsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllSLAsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllSLAsRequest.Merge(m, src)
}
func (m *GetAllSLAsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllSLAsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllSLAsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllSLAsRequest proto.InternalMessageInfo

// QueryAllSLAsResponse is the response type for the Query/GetAllSLAs RPC method.
type GetAllSLAsResponse struct {
	SLAs []PriceFeedSLA `protobuf:"bytes,1,rep,name=slas,proto3" json:"slas"`
}

func (m *GetAllSLAsResponse) Reset()         { *m = GetAllSLAsResponse{} }
func (m *GetAllSLAsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllSLAsResponse) ProtoMessage()    {}
func (*GetAllSLAsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e0a991cdb10d68d, []int{1}
}
func (m *GetAllSLAsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllSLAsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllSLAsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllSLAsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllSLAsResponse.Merge(m, src)
}
func (m *GetAllSLAsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllSLAsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllSLAsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllSLAsResponse proto.InternalMessageInfo

func (m *GetAllSLAsResponse) GetSLAs() []PriceFeedSLA {
	if m != nil {
		return m.SLAs
	}
	return nil
}

// QueryGetPriceFeedsRequest is the request type for the Query/GetPriceFeeds RPC method.
type GetPriceFeedsRequest struct {
	// SLA defines the SLA to query price feeds for.
	Sla string `protobuf:"bytes,1,opt,name=sla,proto3" json:"sla,omitempty"`
}

func (m *GetPriceFeedsRequest) Reset()         { *m = GetPriceFeedsRequest{} }
func (m *GetPriceFeedsRequest) String() string { return proto.CompactTextString(m) }
func (*GetPriceFeedsRequest) ProtoMessage()    {}
func (*GetPriceFeedsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e0a991cdb10d68d, []int{2}
}
func (m *GetPriceFeedsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPriceFeedsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPriceFeedsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPriceFeedsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPriceFeedsRequest.Merge(m, src)
}
func (m *GetPriceFeedsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPriceFeedsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPriceFeedsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPriceFeedsRequest proto.InternalMessageInfo

func (m *GetPriceFeedsRequest) GetSla() string {
	if m != nil {
		return m.Sla
	}
	return ""
}

// QueryGetPriceFeedsResponse is the response type for the Query/GetPriceFeeds RPC method.
type GetPriceFeedsResponse struct {
	// PriceFeeds defines the price feeds for the given SLA.
	PriceFeeds []PriceFeed `protobuf:"bytes,1,rep,name=price_feeds,json=priceFeeds,proto3" json:"price_feeds"`
}

func (m *GetPriceFeedsResponse) Reset()         { *m = GetPriceFeedsResponse{} }
func (m *GetPriceFeedsResponse) String() string { return proto.CompactTextString(m) }
func (*GetPriceFeedsResponse) ProtoMessage()    {}
func (*GetPriceFeedsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e0a991cdb10d68d, []int{3}
}
func (m *GetPriceFeedsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPriceFeedsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPriceFeedsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPriceFeedsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPriceFeedsResponse.Merge(m, src)
}
func (m *GetPriceFeedsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPriceFeedsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPriceFeedsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPriceFeedsResponse proto.InternalMessageInfo

func (m *GetPriceFeedsResponse) GetPriceFeeds() []PriceFeed {
	if m != nil {
		return m.PriceFeeds
	}
	return nil
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
type ParamsRequest struct {
}

func (m *ParamsRequest) Reset()         { *m = ParamsRequest{} }
func (m *ParamsRequest) String() string { return proto.CompactTextString(m) }
func (*ParamsRequest) ProtoMessage()    {}
func (*ParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e0a991cdb10d68d, []int{4}
}
func (m *ParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsRequest.Merge(m, src)
}
func (m *ParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type ParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *ParamsResponse) Reset()         { *m = ParamsResponse{} }
func (m *ParamsResponse) String() string { return proto.CompactTextString(m) }
func (*ParamsResponse) ProtoMessage()    {}
func (*ParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e0a991cdb10d68d, []int{5}
}
func (m *ParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsResponse.Merge(m, src)
}
func (m *ParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsResponse proto.InternalMessageInfo

func (m *ParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*GetAllSLAsRequest)(nil), "slinky.sla.v1.GetAllSLAsRequest")
	proto.RegisterType((*GetAllSLAsResponse)(nil), "slinky.sla.v1.GetAllSLAsResponse")
	proto.RegisterType((*GetPriceFeedsRequest)(nil), "slinky.sla.v1.GetPriceFeedsRequest")
	proto.RegisterType((*GetPriceFeedsResponse)(nil), "slinky.sla.v1.GetPriceFeedsResponse")
	proto.RegisterType((*ParamsRequest)(nil), "slinky.sla.v1.ParamsRequest")
	proto.RegisterType((*ParamsResponse)(nil), "slinky.sla.v1.ParamsResponse")
}

func init() { proto.RegisterFile("slinky/sla/v1/query.proto", fileDescriptor_7e0a991cdb10d68d) }

var fileDescriptor_7e0a991cdb10d68d = []byte{
	// 447 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x4f, 0x6f, 0xd3, 0x30,
	0x1c, 0x4d, 0xb6, 0x52, 0x89, 0x5f, 0x29, 0x7f, 0xbc, 0x45, 0x94, 0xb4, 0xcb, 0x4a, 0x40, 0xa8,
	0x17, 0x62, 0xad, 0x3b, 0x23, 0xe8, 0x24, 0xd8, 0x65, 0x87, 0xd1, 0x5e, 0x10, 0x17, 0xe4, 0x6d,
	0x26, 0x44, 0x73, 0x63, 0x2f, 0x76, 0x2b, 0x7a, 0xe1, 0xc0, 0x27, 0x40, 0xe2, 0x4b, 0xed, 0x38,
	0x89, 0x0b, 0x17, 0x26, 0x94, 0xf2, 0x41, 0x50, 0x1c, 0xa7, 0x2c, 0x29, 0xed, 0xcd, 0x7a, 0xef,
	0xf9, 0xbd, 0x97, 0xe7, 0xc0, 0x23, 0xc9, 0xa2, 0xf8, 0x7c, 0x86, 0x25, 0x23, 0x78, 0xba, 0x87,
	0x2f, 0x26, 0x34, 0x99, 0x05, 0x22, 0xe1, 0x8a, 0xa3, 0x66, 0x4e, 0x05, 0x92, 0x91, 0x60, 0xba,
	0xe7, 0x6e, 0x87, 0x3c, 0xe4, 0x9a, 0xc1, 0xd9, 0x29, 0x17, 0xb9, 0x9d, 0x90, 0xf3, 0x90, 0x51,
	0x4c, 0x44, 0x84, 0x49, 0x1c, 0x73, 0x45, 0x54, 0xc4, 0x63, 0x69, 0xd8, 0x76, 0xd9, 0x3d, 0xa4,
	0x31, 0x95, 0x91, 0x21, 0xfd, 0x2d, 0x78, 0x70, 0x48, 0xd5, 0x80, 0xb1, 0xd1, 0xd1, 0x40, 0x0e,
	0xe9, 0xc5, 0x84, 0x4a, 0xe5, 0x8f, 0x00, 0xdd, 0x04, 0xa5, 0xe0, 0xb1, 0xa4, 0xe8, 0x05, 0xd4,
	0x24, 0x23, 0xb2, 0x65, 0x77, 0x37, 0x7b, 0x8d, 0x7e, 0x3b, 0x28, 0x35, 0x0b, 0x8e, 0x93, 0xe8,
	0x94, 0xbe, 0xa1, 0xf4, 0x6c, 0x74, 0x34, 0x38, 0xb8, 0x73, 0x79, 0xbd, 0x6b, 0xa5, 0xd7, 0xbb,
	0x35, 0x6d, 0xa0, 0xaf, 0xf9, 0x3d, 0xd8, 0x3e, 0xa4, 0x6a, 0x21, 0x2b, 0xc2, 0xd0, 0x7d, 0xd8,
	0x94, 0x8c, 0xb4, 0xec, 0xae, 0xdd, 0xbb, 0x3d, 0xcc, 0x8e, 0xfe, 0x3b, 0x70, 0x2a, 0x4a, 0xd3,
	0xe0, 0x25, 0x34, 0x44, 0x86, 0x7e, 0xf8, 0x98, 0xc1, 0xa6, 0x48, 0x6b, 0x55, 0x91, 0x83, 0x5a,
	0xd6, 0x62, 0x08, 0x62, 0x61, 0xe4, 0xdf, 0x83, 0xe6, 0x31, 0x49, 0xc8, 0x78, 0xf1, 0xa5, 0xaf,
	0xe1, 0x6e, 0x01, 0x98, 0x8c, 0x7d, 0xa8, 0x0b, 0x8d, 0xe8, 0x46, 0x8d, 0xbe, 0x53, 0xb5, 0xd7,
	0xa4, 0xf1, 0x36, 0xd2, 0xfe, 0xaf, 0x0d, 0xb8, 0xf5, 0x36, 0x7b, 0x35, 0x14, 0x03, 0xfc, 0x9b,
	0x0e, 0x75, 0x2b, 0x97, 0x97, 0xa6, 0x76, 0x1f, 0xaf, 0x51, 0xe4, 0x8d, 0xfc, 0xf6, 0xd7, 0x1f,
	0x7f, 0xbe, 0x6f, 0x38, 0x68, 0x0b, 0x97, 0x1f, 0x32, 0x5b, 0x15, 0x7d, 0x81, 0x66, 0x69, 0x2b,
	0xf4, 0x64, 0xd9, 0x70, 0x69, 0x73, 0xf7, 0xe9, 0x7a, 0x91, 0x09, 0xf6, 0x75, 0x70, 0x07, 0xb9,
	0x95, 0xe0, 0x1b, 0x6f, 0x80, 0xce, 0xa0, 0x9e, 0x2f, 0x82, 0x3a, 0xff, 0x1d, 0xaa, 0x48, 0xdc,
	0x59, 0xc1, 0x9a, 0xa8, 0x1d, 0x1d, 0xf5, 0x10, 0x39, 0xd5, 0xa8, 0x7c, 0xed, 0x57, 0x97, 0xa9,
	0x67, 0x5f, 0xa5, 0x9e, 0xfd, 0x3b, 0xf5, 0xec, 0x6f, 0x73, 0xcf, 0xba, 0x9a, 0x7b, 0xd6, 0xcf,
	0xb9, 0x67, 0xbd, 0x7f, 0x16, 0x46, 0xea, 0xd3, 0xe4, 0x24, 0x38, 0xe5, 0x63, 0x2c, 0xcf, 0x23,
	0xf1, 0x7c, 0x4c, 0xa7, 0x85, 0xc7, 0x67, 0xed, 0xa2, 0x66, 0x82, 0xca, 0x93, 0xba, 0xfe, 0xdd,
	0xf7, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x36, 0xb6, 0x10, 0x23, 0x6b, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// GetAllSLAs returns all SLAs that the module is currently enforcing.
	GetAllSLAs(ctx context.Context, in *GetAllSLAsRequest, opts ...grpc.CallOption) (*GetAllSLAsResponse, error)
	// GetPriceFeeds returns all price feeds that the module is currently tracking.
	// This request type inputs the SLA ID to query price feeds for.
	GetPriceFeeds(ctx context.Context, in *GetPriceFeedsRequest, opts ...grpc.CallOption) (*GetPriceFeedsResponse, error)
	// Params returns the current SLA module parameters.
	Params(ctx context.Context, in *ParamsRequest, opts ...grpc.CallOption) (*ParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetAllSLAs(ctx context.Context, in *GetAllSLAsRequest, opts ...grpc.CallOption) (*GetAllSLAsResponse, error) {
	out := new(GetAllSLAsResponse)
	err := c.cc.Invoke(ctx, "/slinky.sla.v1.Query/GetAllSLAs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPriceFeeds(ctx context.Context, in *GetPriceFeedsRequest, opts ...grpc.CallOption) (*GetPriceFeedsResponse, error) {
	out := new(GetPriceFeedsResponse)
	err := c.cc.Invoke(ctx, "/slinky.sla.v1.Query/GetPriceFeeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *ParamsRequest, opts ...grpc.CallOption) (*ParamsResponse, error) {
	out := new(ParamsResponse)
	err := c.cc.Invoke(ctx, "/slinky.sla.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// GetAllSLAs returns all SLAs that the module is currently enforcing.
	GetAllSLAs(context.Context, *GetAllSLAsRequest) (*GetAllSLAsResponse, error)
	// GetPriceFeeds returns all price feeds that the module is currently tracking.
	// This request type inputs the SLA ID to query price feeds for.
	GetPriceFeeds(context.Context, *GetPriceFeedsRequest) (*GetPriceFeedsResponse, error)
	// Params returns the current SLA module parameters.
	Params(context.Context, *ParamsRequest) (*ParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetAllSLAs(ctx context.Context, req *GetAllSLAsRequest) (*GetAllSLAsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSLAs not implemented")
}
func (*UnimplementedQueryServer) GetPriceFeeds(ctx context.Context, req *GetPriceFeedsRequest) (*GetPriceFeedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPriceFeeds not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *ParamsRequest) (*ParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetAllSLAs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSLAsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllSLAs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slinky.sla.v1.Query/GetAllSLAs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllSLAs(ctx, req.(*GetAllSLAsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPriceFeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceFeedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPriceFeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slinky.sla.v1.Query/GetPriceFeeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPriceFeeds(ctx, req.(*GetPriceFeedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slinky.sla.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*ParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slinky.sla.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllSLAs",
			Handler:    _Query_GetAllSLAs_Handler,
		},
		{
			MethodName: "GetPriceFeeds",
			Handler:    _Query_GetPriceFeeds_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slinky/sla/v1/query.proto",
}

func (m *GetAllSLAsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllSLAsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllSLAsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetAllSLAsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllSLAsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllSLAsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SLAs) > 0 {
		for iNdEx := len(m.SLAs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SLAs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetPriceFeedsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPriceFeedsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPriceFeedsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sla) > 0 {
		i -= len(m.Sla)
		copy(dAtA[i:], m.Sla)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sla)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPriceFeedsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPriceFeedsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPriceFeedsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriceFeeds) > 0 {
		for iNdEx := len(m.PriceFeeds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceFeeds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetAllSLAsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetAllSLAsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SLAs) > 0 {
		for _, e := range m.SLAs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetPriceFeedsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sla)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetPriceFeedsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PriceFeeds) > 0 {
		for _, e := range m.PriceFeeds {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetAllSLAsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllSLAsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllSLAsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllSLAsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllSLAsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllSLAsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SLAs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SLAs = append(m.SLAs, PriceFeedSLA{})
			if err := m.SLAs[len(m.SLAs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPriceFeedsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPriceFeedsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPriceFeedsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sla", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sla = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPriceFeedsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPriceFeedsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPriceFeedsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceFeeds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceFeeds = append(m.PriceFeeds, PriceFeed{})
			if err := m.PriceFeeds[len(m.PriceFeeds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
